name: Reusable SCA Workflow

on:
  workflow_call:
    inputs:
      language:
        type: string
        required: true
      project_dir:
        type: string
        required: true
      environment:
        type: string
        required: true
    secrets:
      token:
        required: false
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  sca-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Project Dependencies - SAST
        uses: actions/checkout@v3

      # this tells the workflow to fetch files from the public 
      - name: Checkout Security-Scanning-Repo
        uses: actions/checkout@v3
        with:
          repository: marekboodt/Security-Scanning-Repo
          # specifies the directory where the repository will be cloned in the runner's workspace. path: security-scanning -- add same path later at name: Run SAST script
          path: security-scanning

      - name: Debug File Structure
        run: |
          echo "Root Directory:"
          ls -R

      - name: Load environment-specific config
        run: |
          CONFIG_PATH=./environments/${{ inputs.environment }}/sca-rules.hcl
          echo "Using config: $CONFIG_PATH"

      - name: Run SCA script
        run: |
          bash security-scanning/scripts/01-SCA/${{ inputs.language }}-sca.sh ${{ inputs.project_dir }}
        # If inputs.environment is 'non-prod', the pipeline will continue even if ./run-tests.sh fails. 
        # If inputs.environment is not 'non-prod' (e.g., 'prod'), the pipeline will stop if ./run-tests.sh fails
        continue-on-error: ${{ inputs.environment == 'non-prod' }}
        #continue-on-error: true

      - name: Save JSON Output as Artifact
        if: always() # Ensures the artifact is uploaded even if the previous step fails
        uses: actions/upload-artifact@v3
        with:
          name: pip-audit-results
          path: ${{ inputs.project_dir }}/${{ env.OUTPUT_FILE }} # Use the environment variable from the script
