name: Reusable IAC Workflow

on:
  workflow_call:
    inputs:
      language:
        type: string
        required: true
      project_dir:
        type: string
        required: true
      environment:
        type: string
        required: true
    secrets:
      token:
        required: false
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  custom-iac-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Project Repository - IAC
        uses: actions/checkout@v3

      # this tells the workflow to fetch files from the public 
      - name: Checkout Security-Scanning-Repo
        uses: actions/checkout@v3
        with:
          repository: marekboodt/Security-Scanning-Repo
          # specifies the directory where the repository will be cloned in the runner's workspace. path: security-scanning -- add same path later at name: Run SAST script
          path: security-scanning

# ===================== Custom IaC Scan =====================
      - name: Run IaC Custom *.sh scripts
        run: |
          bash security-scanning/scripts/03-IAC/${{ inputs.language }}-iac.sh ${{ inputs.project_dir }} ${{ inputs.environment }} ${{ inputs.language }}
        # continue-on-error: true
        # If inputs.environment is 'non-prod', the pipeline will continue even if ./run-tests.sh fails. 
        # If inputs.environment is not 'non-prod' (e.g., 'prod'), the pipeline will stop if ./run-tests.sh fails
        continue-on-error: ${{ inputs.environment == 'non-prod' }}

#      - name: Save Terrascan AWS JSON Output as Artifact
#        if: always()
#         uses: actions/upload-artifact@v4
#        with:
#          name: ${{ env.TERRASCAN_AWS_OUTPUT_FILE }}
#          path: ${{ env.TERRASCAN_AWS_OUTPUT_FILE }}
      
#       - name: Save Terrascan Azure JSON Output as Artifact
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ env.TERRASCAN_AZURE_OUTPUT_FILE }}
#          path: ${{ env.TERRASCAN_AZURE_OUTPUT_FILE }}
      
#      - name: Save Terrascan GCP JSON Output as Artifact
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ env.TERRASCAN_GCP_OUTPUT_FILE }}
#          path: ${{ env.TERRASCAN_GCP_OUTPUT_FILE }}
      
#      - name: Save TFLint JSON Output as Artifact
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ env.TFLINT_FILENAME }}
#          path: ${{ env.TFLINT_OUTPUT_FILE }}

  github-action-iac-scan:
    runs-on: ubuntu-latest
    steps:
# ===================== Generate Timestamp =====================
      - name: Generate Timestamp
        run: echo "TIMESTAMP=$(date +"%Y-%m-%d_GMT_%H.%M")" >> $GITHUB_ENV
        
# ===================== Checkov as GitHub Action =====================
      - name: Create Checkov Scan Results Folder
        run: mkdir -p ${{ inputs.language }}-ALL-IAC-GITHUB-ACTION-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}  # Separate folder for Checkov action

      - name: Run Checkov Scan - CLI Output
        id: checkov-cli
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ inputs.project_dir }}
          framework: terraform
          output_format: cli
          output_file_path: ${{ inputs.language }}-ALL-IAC-GITHUB-ACTION-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}
          #/${{ inputs.language }}-IAC-Checkov-githubactions-scan-${{ inputs.environment }}-${{ env.TIMESTAMP }}.log
          log_level: WARNING
          container_user: 0
        continue-on-error: ${{ inputs.environment == 'non-prod' }}
      
      - name: Run Checkov Scan - SARIF Output
        id: checkov-sarif
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ inputs.project_dir }}
          framework: terraform
          output_format: sarif
          output_file_path: ${{ inputs.language }}-ALL-IAC-GITHUB-ACTION-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}
          # will write automatically in sarif format /${{ inputs.language }}-IAC-Checkov-githubactions-scan-${{ inputs.environment }}-${{ env.TIMESTAMP }}.sarif
          log_level: WARNING
          container_user: 0
        continue-on-error: ${{ inputs.environment == 'non-prod' }}

      - name: Run Checkov Scan - JSON Output
        id: checkov-json
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ inputs.project_dir }}
          framework: terraform
          output_format: json
          output_file_path: ${{ inputs.language }}-ALL-IAC-GITHUB-ACTION-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}
          # /${{ inputs.language }}-IAC-Checkov-githubactions-scan-${{ inputs.environment }}-${{ env.TIMESTAMP }}.json
          log_level: WARNING
          container_user: 0
        continue-on-error: ${{ inputs.environment == 'non-prod' }}

# ===================== Rename Checkov Output Files =====================
      - name: Rename Checkov Output Files
        run: |
          mv ${{ inputs.language }}-ALL-IAC-GITHUB-ACTION-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}/results_json.json \
             ${{ inputs.language }}-ALL-IAC-GITHUB-ACTION-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}/${{ inputs.language }}-IAC-Checkov-githubactions-scan-${{ inputs.environment }}-${{ env.TIMESTAMP }}.json
      
          mv ${{ inputs.language }}-ALL-IAC-GITHUB-ACTION-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}/results_cli.txt \
             ${{ inputs.language }}-ALL-IAC-GITHUB-ACTION-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}/${{ inputs.language }}-IAC-Checkov-githubactions-scan-${{ inputs.environment }}-${{ env.TIMESTAMP }}.log
      
          mv ${{ inputs.language }}-ALL-IAC-GITHUB-ACTION-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}/results_sarif.sarif \
             ${{ inputs.language }}-ALL-IAC-GITHUB-ACTION-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}/${{ inputs.language }}-IAC-Checkov-githubactions-scan-${{ inputs.environment }}-${{ env.TIMESTAMP }}.sarif

  iac-artifact-upload:
    runs-on: ubuntu-latest
    steps:
# ===================== Save All Artifacts =====================
      - name: Save All IaC Scan Results as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}  # Folder name as artifact name
          path: ${{ env.SCAN_RESULTS_DIR }}  # Upload the entire folder
          # if-no-files-found: warn  # Prevent failure if the folder is empty
          if-no-files-found: ignore  # Avoids failure if all files were removed

# ===================== Save Checkov GitHub Action Scan Results =====================
      - name: Save Checkov Scan Results as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.language }}-ALL-IAC-GITHUB-ACTION-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}  # Timestamped artifact name
          path: ${{ inputs.language }}-ALL-IAC-GITHUB-ACTION-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}/  # Corrected folder path
          if-no-files-found: ignore
            
