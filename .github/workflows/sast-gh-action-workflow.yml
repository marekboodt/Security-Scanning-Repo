name: Reusable SAST Checkov GH actions Workflow
# https://github.com/marketplace/actions/checkov-github-action
on:
  workflow_call:
    inputs:
      type:
        type: string
        required: true
      language:
        type: string
        required: true
      project_dir:
        type: string
        required: true
      environment:
        type: string
        required: true
    secrets:
      token:
        required: false
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  generate-timestamp:
    uses: ./.github/workflows/generate-timestamp.yml

#####################################################################
# ===================== GitHub Action SAST Scan =====================
#####################################################################

### the list to test with official github actions 
# Semgrep - multi lang
# Sonarqube - con Heavy setup, some paid features
# Bearer - multi lang
# CodeQL - multi lang
  semgrep:
    # User definable name of this GitHub Actions job.
    name: semgrep/ci
    # If you are self-hosting, change the following `runs-on` value:
    runs-on: ubuntu-latest

    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: semgrep/semgrep

    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')

    steps:
      # Fetch project source with GitHub Actions Checkout. Use either v3 or v4.
      - uses: actions/checkout@v4
      # Run the "semgrep ci" command on the command line of the docker image.
      - run: semgrep ci
        env:
          # Connect to Semgrep AppSec Platform through your SEMGREP_APP_TOKEN.
          # Generate a token from Semgrep AppSec Platform > Settings
          # and add it to your GitHub secrets.
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

          
  github-action-SAST-scan:
    runs-on: ubuntu-latest
    needs: generate-timestamp
    env:
      TIMESTAMP: ${{ needs.generate-timestamp.outputs.timestamp }}
    outputs:
      scan_results_dir: ${{ steps.set-scan-dir.outputs.scan_results_dir }}
    steps:    
      - name: Checkout Project Repository - GH actions
        uses: actions/checkout@v3

# ===================== SAST /  as GitHub Action =====================
      - name: Create Checkov Scan Results Folder
        run: mkdir -p ${{ inputs.language }}-ALL-SAST-GITHUB-ACTION-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}

      - name: Run SAST Scan - All Outputs
        id: 
        uses: 
        with:
        continue-on-error: ${{ inputs.environment == 'non-prod' }}

      - name: Rename Checkov Output Files
        run: |
          mv ${{ inputs.language }}-ALL-SAST-GITHUB-ACTION-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}/results_json.json \
             ${{ inputs.language }}-ALL-SAST-GITHUB-ACTION-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}/${{ inputs.language }}-SAST-Checkov-githubactions-scan-${{ inputs.environment }}-${{ env.TIMESTAMP }}.json
      
# ===================== Upload GH Action Checkov Output Files - Artifacts =====================
      - name: Upload Checkov GitHub Actions Scan Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.language }}-ALL-SAST-GITHUB-ACTION-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}
          path: ${{ inputs.language }}-ALL-SAST-GITHUB-ACTION-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}/
          if-no-files-found: ignore

      - name: Upload Checkov SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ inputs.language }}-ALL-SAST-GITHUB-ACTION-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}/${{ inputs.language }}-SAST-Checkov-githubactions-scan-${{ inputs.environment }}-${{ env.TIMESTAMP }}.sarif
