name: Reusable IAC Checkov Workflow 

on:
  workflow_call:
    inputs:
      type:
        type: string
        required: true
      language:
        type: string
        required: true
      project_dir:
        type: string
        required: true
      environment:
        type: string
        required: true
    secrets:
      token:
        required: false
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  generate-timestamp:
    uses: ./.github/workflows/generate-timestamp.yml

#####################################################################
# ===================== Custom IaC Scan =====================
#####################################################################
  custom-iac-scan:
    runs-on: ubuntu-latest
    needs: [generate-timestamp]
    env:
      TIMESTAMP: ${{ needs.generate-timestamp.outputs.timestamp }}
    steps:
      - name: Use the timestamp in step
        run: echo "The timestamp is $TIMESTAMP"

# ===================== fetch files from the public Repo ===================== 
      - name: Checkout Project Repository - IAC
        uses: actions/checkout@v3
        
      - name: Checkout Security-Scanning-Repo
        uses: actions/checkout@v3
        with:
          repository: marekboodt/Security-Scanning-Repo
          # specifies the directory where the repository will be cloned in the runner's workspace. path: security-scanning -- add same path later at name: Run SAST script
          path: security-scanning
# ===================== Run Custom IaC Scan =====================
      - name: Run IaC Custom *.sh scripts - Download Checkov and Run it
        id: run-custom-iac-checkov-scan # set ID to later in artifact upload use need.<<ID>>.outputs.artifact_name
        run: |
          bash security-scanning/scripts/03-IAC/custom-${{ inputs.language }}-iac.sh ${{ inputs.project_dir }} ${{ inputs.environment }} ${{ inputs.language }} ${{ env.TIMESTAMP }}
        continue-on-error: ${{ inputs.environment == 'non-prod' }}
# ===================== Upload Custom IaC Scan files - Artifacts =====================
      - name: Upload scan results of Custom IaC Scan
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.language }}-ALL-CUSTOM-IAC-SCANS-${{ inputs.environment }}-${{ env.TIMESTAMP }}
          path: ${{ steps.run-custom-iac-checkov-scan.outputs.SCAN_RESULTS_DIR }}

      - name: Show SARIF file content (for debugging)
        run: |
          cat "${{ steps.run-custom-iac-checkov-scan.outputs.SCAN_RESULTS_DIR }}/${{ inputs.language }}-IAC-Checkov-SINGLE-FILE-SCAN-SARIF-${{ inputs.environment }}-${{ env.TIMESTAMP }}/results_sarif.sarif" || echo "SARIF file not found!"
      
      - name: Upload Checkov SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.run-custom-iac-checkov-scan.outputs.SCAN_RESULTS_DIR }}/${{ inputs.language }}-IAC-Checkov-SINGLE-FILE-SCAN-SARIF-${{ inputs.environment }}-${{ env.TIMESTAMP }}/results_sarif.sarif
